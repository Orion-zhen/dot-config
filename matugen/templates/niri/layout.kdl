layout {
    // 窗口间距离(像素)
    gaps 4

    // 当切换焦点时, 是否将焦点列居中
    // - "never", 如果没有设置特殊的居中效果, 那么当屏幕上出现一个超出屏幕范围的列时, 该列会自动滚动到屏幕的左侧或右侧边缘
    // - "always", 该焦点列的内容将始终居中显示
    // - "on-overflow", 当某一列的内容无法在屏幕上完整显示时, 系统会自动将其居中显示, 同时保持之前已选中的列的显示状态不变
    center-focused-column "never"
    // 仅有一个列时, 总是居中显示
    // always-center-single-column

    // 新列默认的模式 normal/tabbed
    default-column-display "normal"
    tab-indicator {
        hide-when-single-tab
    }

    // 预设窗口宽度, 高度同理
    preset-column-widths {
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
        proportion 0.75

        // Fixed sets the width in logical pixels exactly.
        // fixed 1920
    }

    // 窗口的初始宽度
    default-column-width { proportion 0.5; }
    // 让窗口自行决定初始宽度
    // default-column-width {}

    // 焦点窗口的边框
    focus-ring {
        off
    }

    // 窗口边框
    border {
        // 宽度(像素)
        width 2

        // You can also use gradients. They take precedence over solid colors.
        // Gradients are rendered the same as CSS linear-gradient(angle, from, to).
        // The angle is the same as in linear-gradient, and is optional,
        // defaulting to 180 (top-to-bottom gradient).
        // You can use any CSS linear-gradient tool on the web to set these up.
        // Changing the color space is also supported, check the wiki for more info.
        //
        active-gradient from="{{colors.primary.default.hex}}" to="{{colors.primary_container.default.hex}}" angle=45

        // You can also color the gradient relative to the entire view
        // of the workspace, rather than relative to just the window itself.
        // To do that, set relative-to="workspace-view".
        //
        inactive-gradient from="{{colors.outline.default.hex}}" to="{{colors.outline_variant.default.hex}}" angle=45 relative-to="workspace-view"
    }

    // You can enable drop shadows for windows.
    shadow {
        // Uncomment the next line to enable shadows.
        // on

        // By default, the shadow draws only around its window, and not behind it.
        // Uncomment this setting to make the shadow draw behind its window.
        //
        // Note that niri has no way of knowing about the CSD window corner
        // radius. It has to assume that windows have square corners, leading to
        // shadow artifacts inside the CSD rounded corners. This setting fixes
        // those artifacts.
        //
        // However, instead you may want to set prefer-no-csd and/or
        // geometry-corner-radius. Then, niri will know the corner radius and
        // draw the shadow correctly, without having to draw it behind the
        // window. These will also remove client-side shadows if the window
        // draws any.
        //
        // draw-behind-window true

        // You can change how shadows look. The values below are in logical
        // pixels and match the CSS box-shadow properties.

        // Softness controls the shadow blur radius.
        softness 30

        // Spread expands the shadow.
        spread 5

        // Offset moves the shadow relative to the window.
        offset x=0 y=5

        // You can also change the shadow color and opacity.
        color "#0007"
    }

    // Struts shrink the area occupied by windows, similarly to layer-shell panels.
    // You can think of them as a kind of outer gaps. They are set in logical pixels.
    // Left and right struts will cause the next window to the side to always be visible.
    // Top and bottom struts will simply add outer gaps in addition to the area occupied by
    // layer-shell panels and regular gaps.
    struts {
        // left 64
        // right 64
        // top 64
        // bottom 64
    }
}